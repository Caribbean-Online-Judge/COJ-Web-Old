clear.selected.analysis= DELETE FROM team_analyzer_analysis WHERE id = ?
load.all.useful.users= SELECT username , uid FROM users WHERE (status = 'active' OR status = 'dormant') AND uid <> ? ORDER BY username
load.all.useful.contest= SELECT cid, cid || ' - ' || name AS name FROM contest where enabled ORDER BY cid DESC
max.available.analysis.id= SELECT max(id) FROM team_analyzer_analysis WHERE team_analyzer_analysis.id < 10000
insert.analysis= INSERT INTO team_analyzer_analysis (name,coach) VALUES(?,?)
insert.user.analysis= INSERT INTO team_analyzer_user(taid,uid) VALUES(?,?)
insert.contest.analysis= INSERT INTO team_analyzer_contest(taid,cid) VALUES(?,?)
select.analysis.by.id= SELECT * FROM team_analyzer_analysis WHERE id = ?
load.all.users.in.analysis= SELECT username , uid FROM users JOIN team_analyzer_user USING (uid) WHERE taid = ? ORDER BY username
load.all.contests.in.analysis= SELECT cid, cid || ' - ' || name AS name FROM contest JOIN team_analyzer_contest USING (cid) WHERE taid = ? ORDER BY cid DESC
load.all.contests.off.analysis= SELECT cid, cid || ' - ' || name AS name FROM contest WHERE cid NOT IN (select cid from team_analyzer_contest where taid= ?) AND enabled ORDER BY cid DESC
load.all.users.off.analysis= SELECT username , uid FROM users WHERE (status = 'active' OR status = 'dormant') AND uid NOT IN (select uid from team_analyzer_user where taid= ?) AND uid <> ? ORDER BY username
clear.contests.analysis= DELETE FROM team_analyzer_contest WHERE taid = ?
clear.users.analysis= DELETE FROM team_analyzer_user WHERE taid = ?
clear.users.analysis.stats= DELETE FROM team_analyzer_user_stats WHERE taid = ?
update.analysis.name= UPDATE team_analyzer_analysis SET name = ?  WHERE id = ?

select.user.stats=select id_classification, sum(case when complexity = 1 and existent=1 then 1 else 0 end)*1+sum(case when complexity = 2 and existent=1 then 1 else 0 end)*2+sum(case when complexity = 3 and existent=1 then 1 else 0 end)*3+sum(case when complexity = 4 and existent=1 then 1 else 0 end)*4+sum(case when complexity = 5 and existent=1 then 1 else 0 end)*5 as top from (select *,1 as existent from user_problem where user_id = ? and accepted ) user_problem right join problem_classification on pid = problem_id join classifications using (id_classification) WHERE pid IN (select pid from problem_contest JOIN team_analyzer_contest USING (cid) WHERE taid = ?) group by id_classification order by id_classification
insert.user.stats=INSERT INTO team_analyzer_user_stats(uid,taid,id_classification,value) VALUES(?,?,?,?)
